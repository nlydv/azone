const { underline } = require("chalk");
const { echo, exit, mkdir, test } = require("shelljs");
const { ldns, nsd } = require("./tools.js");
const opt = require("../config.json");

// These four locations can be customized via config.json
const ZONEDIR = opt.zonedir ?? opt.main;
const DATADIR = `${opt.main}/${opt.faildir}`;
const KEYDIR  = `${opt.main}/${opt.keydir}`;
const NSDCONF = `${opt.nsd.main}/${opt.nsd.conf}`;

const DEFZONE = `${DATADIR}/zones.conf`;

function init() {
    const fail = {
        success: false,
        code: 13,
        type: "error",
        msg: null
    };

    const hasLDNS = Object.values(ldns).every(x => x !== null);

    if ( ! hasLDNS ) {
        fail.msg = "ldns command line tools are either not installed or are not accessible from $PATH";
    }

    else if ( process.geteuid() !== 0 ) {
        fail.type = "warn";
        fail.msg = "sudo permissions required";
    }

    else if ( ! test("-d", ZONEDIR) ) {
        if ( ZONEDIR === "/etc/nsd/azone" ) {
            mkdir(ZONEDIR);
        } else {
            fail.msg = "non-default ZONEDIR does not exist: " + ZONEDIR;
        }
    }

    else {
        if ( ! test("-d", KEYDIR) ) mkdir(KEYDIR);
        if ( ! test("-d", DATADIR) ) mkdir(DATADIR);

        if ( ! test("-f", DEFZONE) ) {
            echo("# Additional NSD zone defintions included in nsd.conf\n# This file is auto-generated by azone.").to(DEFZONE);
        }
    }

    return ( fail.msg ? fail : { success: true } );
}

// initialize () {
//     # || -z $NSD_CONTROL || -z $(which nsd)
//     if [[ -z $LDNS_KEYGEN || -z $LDNS_SIGN || -z $LDNS_VERIFY || -z $LDNS_KEY2DS ]]; then
//         echo -e "\n  ${red}${bold}✖ ${reset}${bold}Error${reset} — ldns command line tools are either not installed or are not accessible from \$PATH\n"
//         exit 13
//     elif [[ ! $EUID == 0 ]]; then
//         echo -e "\n  ${yellow}${bold}！${reset}sudo permissions required\n"
//         exit 13
//     fi
//
//     if [[ $ZONEDIR == "/etc/nsd/azone" ]]; then
//         [[ ! -d $ZONEDIR ]] && mkdir $ZONEDIR
//     else
//         echo -e "\n  ${red}${bold}✖ ${reset}${bold}Error${reset} — non-default ZONEDIR directory does not exist — ${ZONEDIR}\n"
//         exit 13
//     fi
//
//     [[ ! -d $KEYDIR ]] && mkdir $KEYDIR
//     [[ ! -d $DATADIR ]] && mkdir $DATADIR
//     [[ ! -f $DEFZONE ]] \
//         && echo -e "# Additional NSD zone defintions included in nsd.conf\n# This file is auto-generated by azone." > ${DATADIR}/zones.conf
//
//     cd $ZONEDIR || exit 13
//     return 0
// }

module.exports = {
    init,
    loc: {
        ZONEDIR,
        DATADIR,
        KEYDIR,
        NSDCONF,
        DEFZONE
    }
};
